{
  "hash": "5cd60c73c5af22a9ee5df22d7d226294",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Selecting Elements (in R)\"\n---\n\n\n\n\n## `[`, `[[`, and `$`\n\nIn R, there are three primary methods of selecting elements in an object -- `[`, `[[`, and `$`. However, many R users don't actually know how the three methods differ from one another. The following attempts to clarify this! Let's start with a multi-element list and then check out an example of each.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make a 3-element list\nmy_list <- list(\"a\" = 1:3, \"b\" = \"hello\", \"c\" = 7:9)\n```\n:::\n\n\n\n\n:::{.panel-tabset}\n\n### Single Bracket - `[`\n\nIf `x` is a train with multiple cars where each car may contain some number of items, <u>`x[1]` grabs the whole first train car</u>. This means that the extracted bit is still the same type of data as the original object; in this case that means we still have a list, just this time it has only a single element.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select with position\nmy_list[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$a\n[1] 1 2 3\n```\n\n\n:::\n:::\n\n\n\n\nUsing either element position or element name (if there is one) is supported.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select with name\nmy_list[\"c\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$c\n[1] 7 8 9\n```\n\n\n:::\n:::\n\n\n\n\n### Double Brackets - `[[`\n\nIf `x` is a train with multiple cars where each car may contain some number of items, <u>`x[[1]]` grabs the _contents of_ the whole first train car</u>. This means that the type of data _changes_ to whatever is stored in that element. In this case that means we now have a vector.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_list[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n:::\n\n\n\n\nAgain, both element position and element name (if there is one) are supported.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_list[[\"c\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7 8 9\n```\n\n\n:::\n:::\n\n\n\n\n\n### Dollar Sign - `$`\n\nIf `x` is a train with multiple cars where each car may contain some number of items, <u>`x$name` _also_ grabs the _contents of_ the whole first train car</u>. `x$name` is shorthand for `x[[\"name\"]]`! However, _only_ the element name is supported when using this method for selecting an element.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_list$a\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n## `[[` versus `$`\n\nThe above examples show how `[[` and `$` function similarly but there is an important caveat to this! <u>If `name` is an object containing one of the names in `x`, then the two methods differ</u>. `x[[name]]` will get the entity that matches the _value_ of `name` while `x$name` will get an entity that _is itself named_ `name`. See an example below:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make a new list\nmy_list2 <- list(\"d\" = 4, \"e\" = 5, \"f\" = 6)\n\n# Make an object containing the name we want\nwanted_bit <- \"e\"\n\n# Select it with double brackets\nmy_list2[[wanted_bit]] # <1>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\n\n1. `wanted_bit` is interpreted as `\"e\"` because that is the value bound to that object.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select it with a dollar sign\nmy_list2$wanted_bit # <2>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNULL\n```\n\n\n:::\n:::\n\n\n\n2. This returns `NULL` because `\"wanted_bit\"` is not the name of any element of this list.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}